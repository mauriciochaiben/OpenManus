# Ruff configuration for OpenManus backend
# Modern Python linting and formatting configuration

# Increased line length for modern development practices
line-length = 120
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

# Include notebooks
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "temp_files",
    "uploads",
    "logs",
]

[lint]
# Enable comprehensive linting rules for modern Python development
select = [
    # pycodestyle
    "E", # Error
    "W", # Warning
    # Pyflakes
    "F", # Pyflakes
    # pyupgrade
    "UP", # pyupgrade
    # flake8-bugbear
    "B", # flake8-bugbear
    # flake8-simplify
    "SIM", # flake8-simplify
    # isort
    "I", # isort
    # flake8-comprehensions
    "C4", # flake8-comprehensions
    # flake8-unused-arguments
    "ARG", # flake8-unused-arguments
    # flake8-use-pathlib
    "PTH", # flake8-use-pathlib
    # flake8-quotes
    "Q", # flake8-quotes
    # flake8-return
    "RET", # flake8-return
    # flake8-raise
    "RSE", # flake8-raise
    # flake8-type-checking
    "TCH", # flake8-type-checking
    # pydocstyle (documentation)
    "D", # pydocstyle
    # flake8-bandit (security)
    "S", # flake8-bandit
    # pylint
    "PL", # pylint
    # Ruff-specific rules
    "RUF", # Ruff-specific
]

# Ignore specific rules that can be too strict for this project
ignore = [
    # Missing docstring rules (too strict for existing code)
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__

    # Docstring formatting issues that are too opinionated
    "D200", # One-line docstring should fit on one line
    "D212", # Multi-line docstring summary should start at the first line
    "D400", # First line should end with a period
    "D401", # First line should be in imperative mood
    "D415", # First line should end with a period, question mark, or exclamation point

    # Security issues that are false positives in this context
    "S101", # Use of assert (needed for tests and debugging)
    "S104", # Possible binding to all interfaces
    "S108", # Probable insecure usage of temp file/directory
    "S311", # Standard pseudo-random generators (not cryptographic use)
    "S603", # subprocess call: check for execution of untrusted input
    "S607", # Starting a process with a partial executable path

    # Pylint rules that can be too opinionated for this codebase
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements in function definition
    "PLR2004", # Magic value used in comparison
    "PLW2901", # Redefined loop variable
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Tests can use magic values, assertions, and longer lines
"tests/**/*.py" = [
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert
    "E501",    # Line too long
    "D",       # All docstring rules
    "ANN",     # All type annotation rules
]

# __init__.py files can have unused imports (for re-exporting)
"__init__.py" = [
    "F401", # Module imported but unused
    "F403", # Unable to detect undefined names from star imports
]

# FastAPI files can use function calls in default arguments (Depends, File, Query)
"app/api/**/*.py" = [
    "B008", # Do not perform function calls in argument defaults
]

# Prompt files can have longer lines for readability
"app/prompt/**/*.py" = [
    "E501", # Line too long
]

# Tool files can have longer description strings
"app/tool/**/*.py" = [
    "E501", # Line too long
]

# Configuration files can be more lenient
"app/config/**/*.py" = [
    "S105", # Possible hardcoded password
    "S106", # Possible hardcoded password
]

# Demo files are for testing and can be more lenient
"demos/**/*.py" = [
    "T201",    # print found
    "S101",    # Use of assert
    "PLR2004", # Magic value used in comparison
]

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings.
docstring-code-format = true

# Set the line length limit used for formatting and line length violations.
docstring-code-line-length = "dynamic"

[lint.isort]
# Force imports to be sorted alphabetically within their section
force-sort-within-sections = true

# Separate imports into sections
known-first-party = ["app"]

# Use hanging indents for long imports
multi-line-output = 3
include-trailing-comma = true
force-grid-wrap = 0
combine-as-imports = true
line-length = 120

[lint.mccabe]
# McCabe complexity threshold
max-complexity = 10

[lint.pylint]
# Maximum number of arguments for function / method
max-args = 8

# Maximum number of locals for function / method body
max-locals = 20

# Maximum number of branches for function / method body
max-branches = 12

# Maximum number of statements in function / method body
max-statements = 50
