# Ruff configuration for OpenManus backend
line-length = 120
indent-width = 4
target-version = "py311"

include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "temp_files",
    "uploads",
    "logs",
]

[lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "C4",  # flake8-comprehensions
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "TCH", # flake8-type-checking
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in __init__
    "D200",    # One-line docstring should fit on one line
    "D203",    # 1 blank line required before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D415",    # First line should end with a period, question mark, or exclamation point
    "S101",    # Use of assert detected
    "S102",    # Use of exec detected
    "S104",    # Possible binding to all interfaces
    "S108",    # Probable insecure usage of temp file/directory
    "S202",    # Use of tarfile.extractall() without proper filtering
    "S311",    # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "S603",    # subprocess call: check for execution of untrusted input
    "S607",    # Starting a process with a partial executable path
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLW2901", # Redefined loop name
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
]

fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
"tests/**/*.py" = ["PLR2004", "S101", "E501", "E402", "D", "ARG"]
"__init__.py" = ["F401", "F403"]
"app/api/**/*.py" = ["B008"]
"app/prompt/**/*.py" = ["E501"]
"app/tool/**/*.py" = ["E501"]
"app/config/**/*.py" = ["S105", "S106"]
"demos/**/*.py" = ["T201", "S101", "PLR2004"]

[lint.isort]
force-sort-within-sections = true
known-first-party = ["app"]

[lint.mccabe]
max-complexity = 10

[lint.pylint]
max-args = 8
max-locals = 20
max-branches = 12
max-statements = 50

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
